group 'com.seabware'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'

sourceCompatibility = 1.5

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

// ---------------------------------------------------------------------------------------------------------------------
// Creates a new project template.
// ---------------------------------------------------------------------------------------------------------------------
task createProject() {

    def projectName = ''
    def rootPackage = 'com.seabware'
    def rootFolder = '..'

    def propertiesMap = [:]
    propertiesMap.contextName = 'grocery-api'

    def console = System.console()
    if (console) {
        projectName = console.readLine('> Please enter project name: ')
    } else {
        logger.error 'Cannot get console...'
    }

    def newProjectFolder = new File(rootFolder, projectName)
    if( !newProjectFolder.exists() ) {

        // -------------------------------------------------------------------------------------------------------------
        // Creating folder structure.
        // -------------------------------------------------------------------------------------------------------------

        println('Creating folder: ' + newProjectFolder)
        if(!newProjectFolder.mkdirs()) {
            println('Failed to make Project folder...')
        }

        // src/main/java/com/seabware/{projectName}
        def srcMainJavaFolder = new File(newProjectFolder, 'src/main/java/com/seabware/' +  projectName)
        println('Creating folder: ' + srcMainJavaFolder)
        if(!srcMainJavaFolder.mkdirs()) {
            println('Failed to create ' + srcMainJavaFolder + '...')
        }

        // src/main/resources
        def srcMainResourcesFolder = new File(newProjectFolder, 'src/main/resources')
        println('Creating folder: ' + srcMainResourcesFolder)
        if(!srcMainResourcesFolder.mkdirs()) {
            println('Failed to create ' + srcMainResourcesFolder + '...')
        }

        // src/test/java/com/seabware/{projectName}
        def srcTestJavaFolder = new File(newProjectFolder, 'src/test/java/com/seabware/' +  projectName)
        println('Creating folder: ' + srcTestJavaFolder)
        if(!srcTestJavaFolder.mkdirs()) {
            println('Failed to create ' + srcTestJavaFolder + '...')
        }

        // src/test/resources
        def srcTestResourcesFolder = new File(newProjectFolder, 'src/test/resources')
        println('Creating folder: ' + srcTestResourcesFolder)
        if(!srcTestResourcesFolder.mkdirs()) {
            println('Failed to create ' + srcTestResourcesFolder + '...')
        }

        // -------------------------------------------------------------------------------------------------------------
        // Copying template files and folders.
        // -------------------------------------------------------------------------------------------------------------

        // log4j.properties copy
        println('Copying files to: ' + srcMainResourcesFolder)
        Copy copyTask = task(copyTask, type: Copy)
        copyTask.from 'templates/logging'
        copyTask.into srcMainResourcesFolder
        copyTask.include 'log4j.properties'
        copyTask.execute()

        // Spring files copy
        def springFolder = new File(newProjectFolder, 'src/main/resources/spring')
        println('Copying files to: ' + springFolder)
        copyTask = task(copyTask, type: Copy)
        copyTask.from 'templates/spring'
        copyTask.into springFolder
        copyTask.execute()

        // WEB-INF copy
        def webInfFolder = new File(newProjectFolder, 'src/main/webapp/WEB-INF')
        println('Copying files to: ' + webInfFolder)
        copyTask = task(copyTask, type: Copy)
        copyTask.from 'templates/WEB-INF'
        copyTask.into webInfFolder
        copyTask.execute()

        // META-INF copy
        def metaInfFolder = new File(newProjectFolder, 'src/main/resources/META-INF')
        println('Copying files to: ' + metaInfFolder)
        copyTask = task(copyTask, type: Copy)
        copyTask.from 'templates/META-INF'
        copyTask.into metaInfFolder
        copyTask.expand (propertiesMap)
        copyTask.execute()

        // Properties files copy
        def confFolder = new File(newProjectFolder, 'conf/properties')
        println('Copying files to: ' + confFolder)
        copyTask = task(copyTask, type: Copy)
        copyTask.from 'templates/properties'
        copyTask.into confFolder
        copyTask.execute()

    } else {
        println('Project folder exists already...')
    }
}

